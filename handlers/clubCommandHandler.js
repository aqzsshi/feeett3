const { EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const moment = require('moment-timezone'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º moment-timezone
const { images } = require('../config.json');

// –ú–∞—Å—Å–∏–≤ –∫–ª—É–±–æ–≤ —Å id –∏ –º–µ—Ç–∫–∞–º–∏
const CLUBS = [
  { id: 'epsilon', label: 'Epsilon' },
  { id: 'rednecks', label: 'Rednecks' },
  { id: 'carmeet', label: 'Car Meet' },
  { id: 'bikers', label: 'Bikers' },
  { id: 'merryweather', label: 'Merryweather' }
];

const cooldowns = new Map(); // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–æ–≤

const data = {
  name: '–∫–ª—É–±—ã',
  description: '–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–ª—É–±–∞',
};

async function execute(interaction, client) {
  const embed = new EmbedBuilder()
    .setTitle('üéâ Esser* Club')
    .setDescription('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏.\n\n‚è≥ –ö–î: 2 —á–∞—Å–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –∫–ª—É–±–∞—Ö.')
    .setImage(images.clubMenuBanner) // –ó–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    .setColor('#1D1D1E');

  const row = new ActionRowBuilder().addComponents(
    CLUBS.map((club) =>
      new ButtonBuilder()
        .setCustomId(`club_${club.id}`)
        .setLabel(club.label)
        .setStyle(ButtonStyle.Secondary)
    )
  );

  await interaction.reply({ embeds: [embed], components: [row] });
}

async function handleComponent(interaction, client) {
  if (!interaction.isButton()) return false;

  // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ refresh-–∫–Ω–æ–ø–∫–∏
  if (interaction.customId.startsWith('refresh_')) {
    const clubId = interaction.customId.split('_')[1];
    const userId = interaction.user.id;
    const now = Date.now();
    const cooldown = 2 * 60 * 60 * 1000;
    const userCooldown = cooldowns.get(userId) || {};
    const lastUsed = userCooldown[clubId] || 0;
    if (now - lastUsed < cooldown) {
      const remainingMs = cooldown - (now - lastUsed);
      const remainingMin = Math.ceil(remainingMs / (60 * 1000));
      const endTime = moment(lastUsed + cooldown).tz('Europe/Moscow');
      const formattedTime = endTime.format('HH:mm');
      await interaction.reply({
        content: `‚è≥ –ó–∞–¥–∞–Ω–∏–µ –∫–ª—É–±–∞ **${clubId}** –µ—â—ë –∏–¥—ë—Ç. –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤ **${formattedTime} –ú–°–ö** (—á–µ—Ä–µ–∑ ${remainingMin} –º–∏–Ω).`,
        ephemeral: true,
      });
      return true;
    }
    // –ï—Å–ª–∏ –ö–î –∑–∞–∫–æ–Ω—á–∏–ª—Å—è ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    userCooldown[clubId] = now;
    cooldowns.set(userId, userCooldown);
    const endTime = moment(now + cooldown).tz('Europe/Moscow');
    const formattedTime = endTime.format('HH:mm');
    const refreshButton = new ButtonBuilder()
      .setCustomId(`refresh_${clubId}`)
      .setLabel('–û–±–Ω–æ–≤–∏—Ç—å/–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å')
      .setStyle(ButtonStyle.Secondary);
    const startEmbed = new EmbedBuilder()
      .setTitle('üöÄ –ó–∞–¥–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ')
      .setDescription(`–¢—ã –∑–∞–Ω–æ–≤–æ –Ω–∞—á–∞–ª –∑–∞–¥–∞–Ω–∏–µ –∫–ª—É–±–∞ **${clubId}**.`)
      .addFields({ name: '‚è± –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤', value: `**${formattedTime} –ú–°–ö** (—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞)` })
      .setColor('#1D1D1E');
    await interaction.reply({
      content: '–ó–∞–¥–∞–Ω–∏–µ –∫–ª—É–±–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!',
      ephemeral: true,
    });
    try {
      const dm = await interaction.user.createDM();
      await dm.send({ embeds: [startEmbed], components: [new ActionRowBuilder().addComponents(refreshButton)] });
      setTimeout(async () => {
        const endEmbed = new EmbedBuilder()
          .setTitle('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
          .setDescription(`–ó–∞–¥–∞–Ω–∏–µ –∫–ª—É–±–∞ **${clubId}** –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.`)
          .setColor('#1D1D1E');
        try {
          await dm.send({ embeds: [endEmbed] });
        } catch (e) {
          console.warn(`‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –õ–° –ø–æ—Å–ª–µ —Ç–∞–π–º–µ—Ä–∞: ${e.message}`);
        }
      }, cooldown);
    } catch (err) {
      console.warn(`‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –õ–° ${interaction.user.tag}:`, err.message);
    }
    return true;
  }

  // –î–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ club_–∫–Ω–æ–ø–æ–∫
  const [prefix, clubId] = interaction.customId.split('_');
  if (prefix !== 'club') return false;

  const userId = interaction.user.id;
  const now = Date.now();
  const cooldown = 2 * 60 * 60 * 1000; // 2 —á–∞—Å–∞
  const userCooldown = cooldowns.get(userId) || {};
  const lastUsed = userCooldown[clubId] || 0;

  if (now - lastUsed < cooldown) {
    const remainingMs = cooldown - (now - lastUsed);
    const remainingMin = Math.ceil(remainingMs / (60 * 1000));
    await interaction.reply({
      content: `‚è≥ –ó–∞–¥–∞–Ω–∏–µ –∫–ª—É–±–∞ **${clubId}** —É–∂–µ –Ω–∞—á–∞—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remainingMin} –º–∏–Ω.`,
      ephemeral: true,
    });
    return true;
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫—É–ª–¥–∞—É–Ω
  userCooldown[clubId] = now;
  cooldowns.set(userId, userCooldown);

  await interaction.reply({
    content: `‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∫–ª—É–±–∞ **${clubId}** –Ω–∞—á–∞—Ç–æ. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –õ–°.`,
    ephemeral: true,
  });

  const endTime = moment(now + cooldown).tz('Europe/Moscow');
  const formattedTime = endTime.format('HH:mm');

  try {
    const dm = await interaction.user.createDM();

    // –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É ‚Äî –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Ç–∞–π–º–µ—Ä
    const refreshButton = new ButtonBuilder()
      .setCustomId(`refresh_${clubId}`)
      .setLabel('–û–±–Ω–æ–≤–∏—Ç—å/–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å')
      .setStyle(ButtonStyle.Secondary);
    const startEmbed = new EmbedBuilder()
      .setTitle('üöÄ –ó–∞–¥–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ')
      .setDescription(`–¢—ã –Ω–∞—á–∞–ª –∑–∞–¥–∞–Ω–∏–µ –∫–ª—É–±–∞ **${clubId}**.`)
      .addFields({ name: '‚è± –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤', value: `**${formattedTime} –ú–°–ö** (—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞)` })
      .setColor('#1D1D1E');
    await dm.send({ embeds: [startEmbed], components: [new ActionRowBuilder().addComponents(refreshButton)] });
  } catch (err) {
    console.warn(`‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –õ–° ${interaction.user.tag}:`, err.message);
    await interaction.followUp({
      content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —É —Ç–µ–±—è –æ—Ç–∫—Ä—ã—Ç—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.',
      ephemeral: true,
    });
  }
  return true;
}

module.exports = { data, execute, handleComponent };