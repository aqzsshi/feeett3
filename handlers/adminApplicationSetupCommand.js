const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const fs = require('fs');
const path = require('path');

const data = {
  name: '–∑–∞—è–≤–∫–∏_–Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
  description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥—É–ª—å –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)',
  options: [
    {
      name: '–∫–∞–Ω–∞–ª',
      description: 'ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫',
      type: 3, // STRING type
      required: true
    },
    {
      name: '—Ä–æ–ª–∏_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      description: 'ID —Ä–æ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)',
      type: 3, // STRING type
      required: true
    },
    {
      name: '—Ä–æ–ª—å_–ø—Ä–∏–Ω—è—Ç–∏—è',
      description: 'ID —Ä–æ–ª–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏',
      type: 3, // STRING type
      required: true
    },
    {
      name: '—Ñ–æ—Ç–æ_–∑–∞—è–≤–∫–∏',
      description: '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞—è–≤–æ–∫',
      type: 3, // STRING type
      required: true
    }
  ]
};

async function execute(interaction, client) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (!interaction.member.permissions.has('Administrator')) {
    return interaction.reply({
      content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –∑–∞—è–≤–æ–∫. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
      ephemeral: true
    });
  }

  const guildId = interaction.guild.id;
  const channelId = interaction.options.getString('–∫–∞–Ω–∞–ª');
  const mentionRolesStr = interaction.options.getString('—Ä–æ–ª–∏_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
  const callRoleId = interaction.options.getString('—Ä–æ–ª—å_–ø—Ä–∏–Ω—è—Ç–∏—è');
  const applicationPhotoUrl = interaction.options.getString('—Ñ–æ—Ç–æ_–∑–∞—è–≤–∫–∏');

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!channelId.match(/^\d+$/)) {
    return interaction.reply({
      content: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.',
      ephemeral: true
    });
  }

  if (!callRoleId.match(/^\d+$/)) {
    return interaction.reply({
      content: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–æ–ª–∏ –ø—Ä–∏–Ω—è—Ç–∏—è. ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.',
      ephemeral: true
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
  try {
    const channel = await interaction.guild.channels.fetch(channelId);
    if (!channel) {
      return interaction.reply({
        content: '‚ùå –ö–∞–Ω–∞–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.',
        ephemeral: true
      });
    }
  } catch (error) {
    return interaction.reply({
      content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID.',
      ephemeral: true
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –ø—Ä–∏–Ω—è—Ç–∏—è
  try {
    const role = await interaction.guild.roles.fetch(callRoleId);
    if (!role) {
      return interaction.reply({
        content: '‚ùå –†–æ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.',
        ephemeral: true
      });
    }
  } catch (error) {
    return interaction.reply({
      content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID.',
      ephemeral: true
    });
  }

  // –ü–∞—Ä—Å–∏–º —Ä–æ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const mentionRoleIds = mentionRolesStr.split(',').map(id => id.trim()).filter(id => id.match(/^\d+$/));
  
  if (mentionRoleIds.length === 0) {
    return interaction.reply({
      content: '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID —Ä–æ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.',
      ephemeral: true
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  for (const roleId of mentionRoleIds) {
    try {
      const role = await interaction.guild.roles.fetch(roleId);
      if (!role) {
        return interaction.reply({
          content: `‚ùå –†–æ–ª—å —Å ID ${roleId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.`,
          ephemeral: true
        });
      }
    } catch (error) {
      return interaction.reply({
        content: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å —Å ID ${roleId}.`,
        ephemeral: true
      });
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è URL —Ñ–æ—Ç–æ
  if (!applicationPhotoUrl.match(/^https?:\/\/.+\.(png|jpg|jpeg|gif|webp)$/i)) {
    return interaction.reply({
      content: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ. –£–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.',
      ephemeral: true
    });
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const configPath = path.join(__dirname, 'serverConfigs.json');
  let serverConfigs = {};
  
  try {
    if (fs.existsSync(configPath)) {
      serverConfigs = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  serverConfigs[guildId] = {
    ...serverConfigs[guildId],
    applications: {
      familyChannelId: channelId,
      mentionRoleIds: mentionRoleIds,
      callRoleIds: [callRoleId],
      applicationPhotoUrl: applicationPhotoUrl
    }
  };

  try {
    fs.writeFileSync(configPath, JSON.stringify(serverConfigs, null, 2), 'utf8');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
    return interaction.reply({
      content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
      ephemeral: true
    });
  }

  // –°–æ–∑–¥–∞–µ–º embed –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const confirmEmbed = new EmbedBuilder()
    .setTitle('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—è–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
    .setColor('#00FF00')
    .addFields(
      { name: 'üì∫ –ö–∞–Ω–∞–ª –∑–∞—è–≤–æ–∫', value: `<#${channelId}>`, inline: true },
      { name: 'üîî –†–æ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', value: mentionRoleIds.map(id => `<@&${id}>`).join(', '), inline: true },
      { name: 'üéØ –†–æ–ª—å –ø—Ä–∏–Ω—è—Ç–∏—è', value: `<@&${callRoleId}>`, inline: true },
      { name: 'üñºÔ∏è –§–æ—Ç–æ –∑–∞—è–≤–æ–∫', value: applicationPhotoUrl, inline: false }
    )
    .setFooter({ text: `–ù–∞—Å—Ç—Ä–æ–∏–ª: ${interaction.user.tag}` })
    .setTimestamp();

  await interaction.reply({ embeds: [confirmEmbed] });
}

module.exports = { data, execute };