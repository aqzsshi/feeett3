const { 
  EmbedBuilder, 
  ActionRowBuilder, 
  ButtonBuilder, 
  ButtonStyle, 
  StringSelectMenuBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle
} = require('discord.js');
const fs = require('fs');
const path = require('path');
const { images } = require('../config.json');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
const DATA_FILE = path.join(__dirname, 'skillsData.json');

// –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
const SKILLS = [
  { id: 'strength', name: '–°–∏–ª–∞', emoji: '<:sila:1404232366666289192>' },
  { id: 'shooting', name: '–°—Ç—Ä–µ–ª—å–±–∞', emoji: '<:strelba:1404232378553073745>' },
  { id: 'cooking', name: '–ö—É–ª–∏–Ω–∞—Ä–∏—è', emoji: '<:gotovka:1404232221950480436>' },
  { id: 'fishing', name: '–†—ã–±–æ–ª–æ–≤', emoji: '<:ribalka:1404232355375353856>' },
  { id: 'hunting', name: '–û—Ö–æ—Ç–∞', emoji: '<:ohota:1404232274169430056>' },
  { id: 'port', name: '–ü–æ—Ä—Ç', emoji: '<:port:1404232325914558625>' },
  { id: 'construction', name: '–°—Ç—Ä–æ–π–∫–∞', emoji: '<:stroika:1404232389856854216>' },
  { id: 'mining', name: '–®–∞—Ö—Ç–µ—Ä', emoji: '<:haxta:1404232231446122526>' },
  { id: 'taxi', name: '–¢–∞–∫—Å–∏—Å—Ç', emoji: '<:taxi:1404232403538542602>' },
  { id: 'farming', name: '–§–µ—Ä–º–µ—Ä', emoji: '<:ferma:1404232210864799897>' },
  { id: 'treasure', name: '–°–æ–∫—Ä–æ–≤–∏—â.', emoji: '<:pois_sokrov:1404232312656232499>' },
  { id: 'diver', name: '–î–∞–π–≤–µ—Ä', emoji: '<:ohota:1404232274169430056>' },
  { id: 'collector', name: '–ò–Ω–∫–∞—Å—Å–∞—Ç–æ—Ä', emoji: '<:inkosator:1404232242603098263>' },
  { id: 'busdriver', name: '–ê–≤—Ç–æ–±—É—Å', emoji: '<:avtobusnik:1404232186206355609>' },
  { id: 'mechanic', name: '–ú–µ—Ö–∞–Ω–∏–∫', emoji: '<:mexanik:1404232263800983663>' },
  { id: 'firefighter', name: '–ü–æ–∂–∞—Ä–Ω—ã–π', emoji: '<:pozharnik:1404232344205787136>' },
  { id: 'trucker', name: '–î–∞–ª—å–Ω–æ–±–æ–π', emoji: '<:daknoboi:1404232200395948042>' },
  { id: 'courier', name: '–ö—É—Ä—å–µ—Ä', emoji: '<:kurier:1404232251662929932>' },
  { id: 'postman', name: '–ü–æ—á—Ç–∞–ª—å–æ–Ω', emoji: '<:pochalion:1404232286873980948>' },
  { id: 'contractor', name: '–ü–æ–¥—Ä—è–¥—á–∏–∫', emoji: '<:podryatchik:1404232301415632937>' }
];

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
function loadData() {
  try {
    if (fs.existsSync(DATA_FILE)) {
      const data = fs.readFileSync(DATA_FILE, 'utf8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤:', error);
  }
  return {};
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
function saveData(data) {
  try {
    fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2), 'utf8');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤:', error);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserData(userId) {
  const data = loadData();
  if (!data[userId]) {
    data[userId] = {
      characterName: '',
      skills: {}
    };
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ –Ω–∞ 0
    SKILLS.forEach(skill => {
      data[userId].skills[skill.id] = 0;
    });
    saveData(data);
  }
  return data[userId];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserData(userId, userData) {
  const data = loadData();
  data[userId] = userData;
  saveData(data);
}

// –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é –Ω–∞–≤—ã–∫–æ–≤
const menuData = {
  name: '–º–µ–Ω—é_–Ω–∞–≤—ã–∫–æ–≤',
  description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤—ã–∫–æ–≤'
};

async function executeMenu(interaction, client) {
  const embed = new EmbedBuilder()
    .setTitle('–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤—ã–∫–æ–≤ ! Esser*')
    .setDescription('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –Ω–∞–≤—ã–∫–æ–≤! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∏–≥—Ä–æ–≤—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.')
    .setColor('#1D1D1E')
    .addFields(
      { name: '<:podryatchik:1404232301415632937> –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏', value: `${SKILLS.length} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π`, inline: true },
      { name: '<:pozharnik:1404232344205787136> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å', value: '5 —É—Ä–æ–≤–µ–Ω—å', inline: true },
      { name: '<:pozharnik:1404232344205787136> –í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤', value: '20 —Ç–∏–ø–æ–≤', inline: true }
    )
    .setImage(images.skillsMenuBanner)
    .setFooter({ text: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ', iconURL: client.user.displayAvatarURL() });

  const row1 = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId('skills_setup')
      .setLabel('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤—ã–∫–æ–≤')
      .setStyle(ButtonStyle.Primary),
    new ButtonBuilder()
      .setCustomId('skills_view_own')
      .setLabel('üë§ –ú–æ–∏ –Ω–∞–≤—ã–∫–∏')
      .setStyle(ButtonStyle.Secondary),
    new ButtonBuilder()
      .setCustomId('skills_change_name')
      .setLabel('‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫')
      .setStyle(ButtonStyle.Secondary)
  );

  const row2 = new ActionRowBuilder().addComponents(
    new StringSelectMenuBuilder()
      .setCustomId('skills_commands')
      .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –Ω–∞–≤—ã–∫–æ–≤')
      .addOptions([
        {
          label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤—ã–∫–æ–≤',
          description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ –Ω–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
          value: 'setup',
          emoji: '‚öôÔ∏è'
        },
        {
          label: '–°–º–µ–Ω–∏—Ç—å –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
          description: '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
          value: 'change_name',
          emoji: '‚úèÔ∏è'
        },
        {
          label: '–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–≤—ã–∫–æ–≤ –∏–≥—Ä–æ–∫–∞',
          description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≤—ã–∫–∏ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞',
          value: 'view_other',
          emoji: 'üîç'
        },
        {
          label: '–ú–æ–∏ –Ω–∞–≤—ã–∫–∏',
          description: '–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏',
          value: 'view_own',
          emoji: 'üë§'
        },
        {
          label: '–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º',
          description: '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
          value: 'help',
          emoji: '‚ùì'
        }
      ])
  );

  await interaction.reply({ embeds: [embed], components: [row1, row2] });
}

// –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≤—ã–∫–æ–≤
const setupData = {
  name: '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞–Ω–∞–≤—ã–∫–æ–≤',
  description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ –Ω–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'
};

async function executeSetup(interaction, client) {
  const modal = new ModalBuilder()
    .setCustomId('skills_setup_modal')
    .setTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');

  const characterNameInput = new TextInputBuilder()
    .setCustomId('character_name')
    .setLabel('–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∏–≥—Ä–µ')
    .setStyle(TextInputStyle.Short)
    .setRequired(true)
    .setMaxLength(32);

  const skillTypeInput = new TextInputBuilder()
    .setCustomId('skill_type')
    .setLabel('–¢–∏–ø –Ω–∞–≤—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–∏–ª–∞, —Å—Ç—Ä–µ–ª—å–±–∞)')
    .setStyle(TextInputStyle.Short)
    .setRequired(true)
    .setPlaceholder('–î–æ—Å—Ç—É–ø–Ω—ã–µ: —Å–∏–ª–∞, —Å—Ç—Ä–µ–ª—å–±–∞, –∫—É–ª–∏–Ω–∞—Ä–∏—è, —Ä—ã–±–æ–ª–æ–≤—Å—Ç–≤–æ...');

  const skillLevelInput = new TextInputBuilder()
    .setCustomId('skill_level')
    .setLabel('–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ (0-5)')
    .setStyle(TextInputStyle.Short)
    .setRequired(true)
    .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 5');

  const firstRow = new ActionRowBuilder().addComponents(characterNameInput);
  const secondRow = new ActionRowBuilder().addComponents(skillTypeInput);
  const thirdRow = new ActionRowBuilder().addComponents(skillLevelInput);

  modal.addComponents(firstRow, secondRow, thirdRow);
  await interaction.showModal(modal);
}

// –ö–æ–º–∞–Ω–¥–∞ —Å–º–µ–Ω—ã –Ω–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const changeNameData = {
  name: '–Ω–∞–≤—ã–∫–∏_–∏–º—è_–ø–µ—Ä—Å–æ–Ω–∞–∂–∞',
  description: '–°–º–µ–Ω–∏—Ç—å –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞'
};

async function executeChangeName(interaction, client) {
  const modal = new ModalBuilder()
    .setCustomId('skills_change_name_modal')
    .setTitle('–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');

  const newNameInput = new TextInputBuilder()
    .setCustomId('new_character_name')
    .setLabel('–ù–æ–≤–æ–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
    .setStyle(TextInputStyle.Short)
    .setRequired(true)
    .setMaxLength(32);

  const firstRow = new ActionRowBuilder().addComponents(newNameInput);
  modal.addComponents(firstRow);
  await interaction.showModal(modal);
}

// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const viewSkillsData = {
  name: '–Ω–∞–≤—ã–∫–∏',
  description: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≤—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
  options: [
    {
      name: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—å–∏ –Ω–∞–≤—ã–∫–∏ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
      type: 6, // USER type
      required: true
    }
  ]
};

async function executeViewSkills(interaction, client) {
  const targetUser = interaction.options.getUser('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
  const userData = getUserData(targetUser.id);

  if (!userData.characterName) {
    return interaction.reply({
      content: `‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUser.username} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂.`
    });
  }

  const embed = createSkillsEmbed(targetUser, userData, client);
  await interaction.reply({ embeds: [embed] });
}

// –°–æ–∑–¥–∞–Ω–∏–µ embed —Å –Ω–∞–≤—ã–∫–∞–º–∏ (–≤—Å–µ –Ω–∞–≤—ã–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
function createSkillsEmbed(user, userData, client) {
  const embed = new EmbedBuilder()
    .setTitle(`üéÆ –ù–∞–≤—ã–∫–∏ ¬ª ${userData.characterName}`)
    .setDescription(`(!) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤—ã–∫–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ${userData.characterName}`)
    .setColor('#1D1D1E')
    .setThumbnail(user.displayAvatarURL())
    .setFooter({ text: `${client.user.username} ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤—ã–∫–æ–≤`, iconURL: client.user.displayAvatarURL() });

  // –†–∞–∑–±–∏–≤–∞–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –Ω–∞ 3 –∫–æ–ª–æ–Ω–∫–∏
  const columns = [[], [], []];
  SKILLS.forEach((skill, index) => {
    const columnIndex = index % 3;
    const level = userData.skills[skill.id] || 0;
    columns[columnIndex].push(`${skill.emoji} ${skill.name}: **${level}/5**`);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ embed
  columns.forEach((column, columnIndex) => {
    if (column.length > 0) {
      embed.addFields({
        name: '\u200b', // –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        value: column.join('\n\n'),
        inline: true
      });
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  embed.addFields({
    name: '\u200b', // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
    value: '',
    inline: false
  });
  
  embed.addFields({
    name: '<:podryatchik:1404232301415632937> –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    value: `**–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤:** ${Object.values(userData.skills).filter(level => level > 0).length}/${SKILLS.length}`,
    inline: false
  });

  return embed;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–∫–Ω–æ–ø–∫–∏, –º–æ–¥–∞–ª–∫–∏)
async function handleComponent(interaction, client) {
  if (interaction.isButton()) {
    switch (interaction.customId) {
      case 'skills_setup':
        await executeSetup(interaction, client);
        return true;
      case 'skills_view_own':
        const userData = getUserData(interaction.user.id);
        if (!userData.characterName) {
          await interaction.reply({
            content: '‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞–Ω–∞–≤—ã–∫–æ–≤`',
            ephemeral: true
        });
          return true;
        }
        const embed = createSkillsEmbed(interaction.user, userData, client);
        await interaction.reply({ embeds: [embed], ephemeral: true });
        return true;
      case 'skills_change_name':
        await executeChangeName(interaction, client);
        return true;
    }
  }

  if (interaction.isModalSubmit()) {
    if (interaction.customId === 'skills_setup_modal') {
      const characterName = interaction.fields.getTextInputValue('character_name');
      const skillType = interaction.fields.getTextInputValue('skill_type').toLowerCase();
      const skillLevel = parseInt(interaction.fields.getTextInputValue('skill_level'));

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
      if (isNaN(skillLevel) || skillLevel < 0 || skillLevel > 5) {
        await interaction.reply({
          content: '‚ùå –£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 5',
          ephemeral: true
        });
        return true;
      }

      // –ü–æ–∏—Å–∫ –Ω–∞–≤—ã–∫–∞
      const skill = SKILLS.find(s => s.name.toLowerCase() === skillType || s.id === skillType);
      if (!skill) {
        await interaction.reply({
          content: `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞–≤—ã–∫: ${skillType}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:\n${SKILLS.map(s => `‚Ä¢ ${s.name}`).join('\n')}`,
          ephemeral: true
        });
        return true;
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const userData = getUserData(interaction.user.id);
      userData.characterName = characterName;
      userData.skills[skill.id] = skillLevel;
      updateUserData(interaction.user.id, userData);

      const embed = new EmbedBuilder()
        .setTitle('‚úÖ –ù–∞–≤—ã–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!')
        .setDescription(`**–ü–µ—Ä—Å–æ–Ω–∞–∂:** ${characterName}\n**–ù–∞–≤—ã–∫:** ${skill.emoji} ${skill.name}\n**–£—Ä–æ–≤–µ–Ω—å:** ${skillLevel}/5`)
        .setColor('#00FF00');

      await interaction.reply({ embeds: [embed], ephemeral: true });
      return true;
    }

    if (interaction.customId === 'skills_change_name_modal') {
      const newName = interaction.fields.getTextInputValue('new_character_name');
      
      const userData = getUserData(interaction.user.id);
      userData.characterName = newName;
      updateUserData(interaction.user.id, userData);

      const embed = new EmbedBuilder()
        .setTitle('‚úÖ –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!')
        .setDescription(`–ù–æ–≤–æ–µ –∏–º—è: **${newName}**`)
        .setColor('#00FF00');

      await interaction.reply({ embeds: [embed], ephemeral: true });
      return true;
    }
  }

  if (interaction.isStringSelectMenu()) {
    if (interaction.customId === 'skills_commands') {
      const selectedCommand = interaction.values[0];
      
      switch (selectedCommand) {
        case 'setup':
          await executeSetup(interaction, client);
          return true;
        case 'change_name':
          await executeChangeName(interaction, client);
          return true;
        case 'view_other':
          await interaction.reply({
            content: 'üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/–Ω–∞–≤—ã–∫–∏ @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≤—ã–∫–æ–≤ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.',
            ephemeral: true
          });
          return true;
        case 'view_own':
          const userData = getUserData(interaction.user.id);
          if (!userData.characterName) {
            await interaction.reply({
              content: '‚ùå –£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞–Ω–∞–≤—ã–∫–æ–≤`',
              ephemeral: true
            });
            return true;
          }
          const embed = createSkillsEmbed(interaction.user, userData, client);
          await interaction.reply({ embeds: [embed], ephemeral: true });
          return true;
        case 'help':
          await interaction.reply({
            content: 'üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤—ã–∫–æ–≤:**\n‚Ä¢ `/–º–µ–Ω—é_–Ω–∞–≤—ã–∫–æ–≤` - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n‚Ä¢ `/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞–Ω–∞–≤—ã–∫–æ–≤` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–≤—ã–∫–∏\n‚Ä¢ `/–Ω–∞–≤—ã–∫–∏_–∏–º—è_–ø–µ—Ä—Å–æ–Ω–∞–∂–∞` - —Å–º–µ–Ω–∏—Ç—å –∏–º—è\n‚Ä¢ `/–Ω–∞–≤—ã–∫–∏ @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≤—ã–∫–∏ –∏–≥—Ä–æ–∫–∞\n\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:**\n' + SKILLS.map(s => `${s.emoji} ${s.name}`).join(', '),
            ephemeral: true
          });
          return true;
      }
    }
  }
  return false;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getCategorySkills(category) {
  const categoryMap = {
    'combat': ['strength', 'shooting', 'hunting'],
    'professions': ['cooking', 'taxi', 'mechanic', 'firefighter', 'contractor'],
    'transport': ['busdriver', 'trucker', 'courier', 'postman'],
    'resources': ['fishing', 'mining', 'farming', 'diver'],
    'special': ['port', 'construction', 'treasure', 'collector']
  };

  const skillIds = categoryMap[category] || [];
  return skillIds.map(id => SKILLS.find(s => s.id === id)).filter(Boolean);
}

function getCategoryName(category) {
  const names = {
    'combat': '–ë–æ–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏',
    'professions': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏',
    'transport': '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    'resources': '–î–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤',
    'special': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ'
  };
  return names[category] || category;
}

module.exports = {
  menuData,
  setupData,
  changeNameData,
  viewSkillsData,
  executeMenu,
  executeSetup,
  executeChangeName,
  executeViewSkills,
  handleComponent,
  getUserData,
  updateUserData,
  SKILLS
};